# Default values for api-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2

image:
  registry: docker.io
  repository: descent1511/backend
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v6.0"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: NodePort
  nodePort: 30001
  port: 8000
  portName: api

ingress:
  enabled: true
  className: nginx
  annotations: 
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: vdt2024.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
    - secretName: chart-example-tls
      hosts:
        - vdt2024.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /v1/users
    port: 8000

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

secrets:
  name: api-secrets
  type: Opaque
  data:
    DB_USER: cG9zdGdyZXM=
    DB_PASS: MTUxMTIwMDI=
    DB_NAME: VkRU
    DB_HOST: cG9zdGdyZXNxbA==
    SECRET_KEY: SXJSQ1VSZWJ4Zw==
    BUCKET_NAME: dmR0MjAyNA==
    BUCKET_REGION: dXMtZWFzdC0x
    ACCESS_KEY: QUtJQTJKSDRVWUtQRU9BVk82RUg=
    SECRET_ACCESS_KEY: YTE4dERSd1dGSjRUR0VqT1FzREdhRW9tcEtPeU1yek5QY3RYVWVrOU8=

serviceMonitor:
  enabled: true
  interval: 30s
  scrapeTimeout: 10s
  namespace: monitoring
  labels:
    release: prometheus
    
certManager:
  issuerName: letsencrypt-prod
  email: truong.le11474@gmail.com
  issuerSecretName: letsencrypt-prod
